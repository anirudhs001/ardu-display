#include <VGAX.h>

//#include <VGAXUAUtils.h>

VGAX vga;
void setup()
{
    Serial.begin(9600);
    pinMode(13, OUTPUT);

    vga.begin();
    vga.clear(0);
}

//image generated from 2BITIMAGE - by Sandro Maffiodo
#define IMG_MARIOMASK_WIDTH 16
#define IMG_MARIOMASK_BWIDTH 4
#define IMG_MARIOMASK_HEIGHT 16
#define IMG_MARIOMASK_SPRITES_CNT 8


//font generated from BITFONZI - by Sandro Maffiodo
#define FNT_NANOFONT_HEIGHT 6
#define FNT_NANOFONT_SYMBOLS_COUNT 95
//data size=570 bytes
const unsigned char fnt_nanofont_data[FNT_NANOFONT_SYMBOLS_COUNT][1+FNT_NANOFONT_HEIGHT] PROGMEM={
{ 1, 128, 128, 128, 0, 128, 0, }, //glyph '!' code=0
{ 3, 160, 160, 0, 0, 0, 0, }, //glyph '"' code=1
{ 5, 80, 248, 80, 248, 80, 0, },  //glyph '#' code=2
{ 5, 120, 160, 112, 40, 240, 0, },  //glyph '$' code=3
{ 5, 136, 16, 32, 64, 136, 0, },  //glyph '%' code=4
{ 5, 96, 144, 104, 144, 104, 0, },  //glyph '&' code=5
{ 2, 128, 64, 0, 0, 0, 0, },  //glyph ''' code=6
{ 2, 64, 128, 128, 128, 64, 0, }, //glyph '(' code=7
{ 2, 128, 64, 64, 64, 128, 0, },  //glyph ')' code=8
{ 3, 0, 160, 64, 160, 0, 0, },  //glyph '*' code=9
{ 3, 0, 64, 224, 64, 0, 0, }, //glyph '+' code=10
{ 2, 0, 0, 0, 0, 128, 64, },  //glyph ',' code=11
{ 3, 0, 0, 224, 0, 0, 0, }, //glyph '-' code=12
{ 1, 0, 0, 0, 0, 128, 0, }, //glyph '.' code=13
{ 5, 8, 16, 32, 64, 128, 0, },  //glyph '/' code=14
{ 4, 96, 144, 144, 144, 96, 0, }, //glyph '0' code=15
{ 3, 64, 192, 64, 64, 224, 0, },  //glyph '1' code=16
{ 4, 224, 16, 96, 128, 240, 0, }, //glyph '2' code=17
{ 4, 224, 16, 96, 16, 224, 0, },  //glyph '3' code=18
{ 4, 144, 144, 240, 16, 16, 0, }, //glyph '4' code=19
{ 4, 240, 128, 224, 16, 224, 0, },  //glyph '5' code=20
{ 4, 96, 128, 224, 144, 96, 0, }, //glyph '6' code=21
{ 4, 240, 16, 32, 64, 64, 0, }, //glyph '7' code=22
{ 4, 96, 144, 96, 144, 96, 0, },  //glyph '8' code=23
{ 4, 96, 144, 112, 16, 96, 0, },  //glyph '9' code=24
{ 1, 0, 128, 0, 128, 0, 0, }, //glyph ':' code=25
{ 2, 0, 128, 0, 0, 128, 64, },  //glyph ';' code=26
{ 3, 32, 64, 128, 64, 32, 0, }, //glyph '<' code=27
{ 3, 0, 224, 0, 224, 0, 0, }, //glyph '=' code=28
{ 3, 128, 64, 32, 64, 128, 0, },  //glyph '>' code=29
{ 4, 224, 16, 96, 0, 64, 0, },  //glyph '?' code=30
{ 4, 96, 144, 176, 128, 112, 0, },  //glyph '@' code=31
{ 4, 96, 144, 240, 144, 144, 0, },  //glyph 'A' code=32
{ 4, 224, 144, 224, 144, 224, 0, }, //glyph 'B' code=33
{ 4, 112, 128, 128, 128, 112, 0, }, //glyph 'C' code=34
{ 4, 224, 144, 144, 144, 224, 0, }, //glyph 'D' code=35
{ 4, 240, 128, 224, 128, 240, 0, }, //glyph 'E' code=36
{ 4, 240, 128, 224, 128, 128, 0, }, //glyph 'F' code=37
{ 4, 112, 128, 176, 144, 112, 0, }, //glyph 'G' code=38
{ 4, 144, 144, 240, 144, 144, 0, }, //glyph 'H' code=39
{ 3, 224, 64, 64, 64, 224, 0, },  //glyph 'I' code=40
{ 4, 240, 16, 16, 144, 96, 0, },  //glyph 'J' code=41
{ 4, 144, 160, 192, 160, 144, 0, }, //glyph 'K' code=42
{ 4, 128, 128, 128, 128, 240, 0, }, //glyph 'L' code=43
{ 5, 136, 216, 168, 136, 136, 0, }, //glyph 'M' code=44
{ 4, 144, 208, 176, 144, 144, 0, }, //glyph 'N' code=45
{ 4, 96, 144, 144, 144, 96, 0, }, //glyph 'O' code=46
{ 4, 224, 144, 224, 128, 128, 0, }, //glyph 'P' code=47
{ 4, 96, 144, 144, 144, 96, 16, },  //glyph 'Q' code=48
{ 4, 224, 144, 224, 160, 144, 0, }, //glyph 'R' code=49
{ 4, 112, 128, 96, 16, 224, 0, }, //glyph 'S' code=50
{ 3, 224, 64, 64, 64, 64, 0, }, //glyph 'T' code=51
{ 4, 144, 144, 144, 144, 96, 0, },  //glyph 'U' code=52
{ 3, 160, 160, 160, 160, 64, 0, },  //glyph 'V' code=53
{ 5, 136, 168, 168, 168, 80, 0, },  //glyph 'W' code=54
{ 4, 144, 144, 96, 144, 144, 0, },  //glyph 'X' code=55
{ 3, 160, 160, 64, 64, 64, 0, },  //glyph 'Y' code=56
{ 4, 240, 16, 96, 128, 240, 0, }, //glyph 'Z' code=57
{ 2, 192, 128, 128, 128, 192, 0, }, //glyph '[' code=58
{ 5, 128, 64, 32, 16, 8, 0, },  //glyph '\' code=59
{ 2, 192, 64, 64, 64, 192, 0, },  //glyph ']' code=60
{ 5, 32, 80, 136, 0, 0, 0, }, //glyph '^' code=61
{ 4, 0, 0, 0, 0, 240, 0, }, //glyph '_' code=62
{ 2, 128, 64, 0, 0, 0, 0, },  //glyph '`' code=63
{ 3, 0, 224, 32, 224, 224, 0, },  //glyph 'a' code=64
{ 3, 128, 224, 160, 160, 224, 0, }, //glyph 'b' code=65
{ 3, 0, 224, 128, 128, 224, 0, }, //glyph 'c' code=66
{ 3, 32, 224, 160, 160, 224, 0, },  //glyph 'd' code=67
{ 3, 0, 224, 224, 128, 224, 0, }, //glyph 'e' code=68
{ 2, 64, 128, 192, 128, 128, 0, },  //glyph 'f' code=69
{ 3, 0, 224, 160, 224, 32, 224, },  //glyph 'g' code=70
{ 3, 128, 224, 160, 160, 160, 0, }, //glyph 'h' code=71
{ 1, 128, 0, 128, 128, 128, 0, }, //glyph 'i' code=72
{ 2, 0, 192, 64, 64, 64, 128, },  //glyph 'j' code=73
{ 3, 128, 160, 192, 160, 160, 0, }, //glyph 'k' code=74
{ 1, 128, 128, 128, 128, 128, 0, }, //glyph 'l' code=75
{ 5, 0, 248, 168, 168, 168, 0, }, //glyph 'm' code=76
{ 3, 0, 224, 160, 160, 160, 0, }, //glyph 'n' code=77
{ 3, 0, 224, 160, 160, 224, 0, }, //glyph 'o' code=78
{ 3, 0, 224, 160, 160, 224, 128, }, //glyph 'p' code=79
{ 3, 0, 224, 160, 160, 224, 32, },  //glyph 'q' code=80
{ 3, 0, 224, 128, 128, 128, 0, }, //glyph 'r' code=81
{ 2, 0, 192, 128, 64, 192, 0, },  //glyph 's' code=82
{ 3, 64, 224, 64, 64, 64, 0, }, //glyph 't' code=83
{ 3, 0, 160, 160, 160, 224, 0, }, //glyph 'u' code=84
{ 3, 0, 160, 160, 160, 64, 0, },  //glyph 'v' code=85
{ 5, 0, 168, 168, 168, 80, 0, },  //glyph 'w' code=86
{ 3, 0, 160, 64, 160, 160, 0, },  //glyph 'x' code=87
{ 3, 0, 160, 160, 224, 32, 224, },  //glyph 'y' code=88
{ 2, 0, 192, 64, 128, 192, 0, },  //glyph 'z' code=89
{ 3, 96, 64, 192, 64, 96, 0, }, //glyph '{' code=90
{ 1, 128, 128, 128, 128, 128, 0, }, //glyph '|' code=91
{ 3, 192, 64, 96, 64, 192, 0, },  //glyph '}' code=92
{ 3, 96, 192, 0, 0, 0, 0, },  //glyph '~' code=93
{ 4, 48, 64, 224, 64, 240, 0, },  //glyph 'Â£' code=94
};
//data size=512 bytes


const unsigned char img_mariomask_data[IMG_MARIOMASK_SPRITES_CNT][IMG_MARIOMASK_HEIGHT][IMG_MARIOMASK_BWIDTH] PROGMEM={
{ { 255, 255, 255, 255, }, { 255, 192,   3, 255, }, { 255,   0,   0,  63, }, { 252,   0,   0,  15, }, { 252,   0,   0,  63, }, { 240,   0,   0,  15, }, { 240,   0,   0,  15, }, { 252,   0,   0,  63, }, { 255,   0,   0, 255, }, { 252,   0,   3, 255, }, { 240,   0,   0, 255, }, { 240,   0,   0, 255, }, { 252,   0,   0, 255, }, { 252,   0,   3, 255, }, { 255,   0,   3, 255, }, { 255,   0,   3, 255, }, },
{ { 255, 255, 255, 255, }, { 255, 192,   3, 255, }, { 255,   0,   0,  63, }, { 252,   0,   0,  15, }, { 252,   0,   0,  63, }, { 240,   0,   0,  15, }, { 240,   0,   0,  15, }, { 252,   0,   0,  63, }, { 255,   0,   0, 255, }, { 252,   0,   0,  63, }, { 252,   0,   0,  15, }, { 240,   0,   0,  15, }, { 240,   0,   0,  63, }, { 252,   0,   0,  63, }, { 252,   0,   0,  63, }, { 255,   3, 192, 255, }, },
{ { 255, 192,  15, 255, }, { 255,   0,   0,  63, }, { 252,   0,   0,  15, }, { 252,   0,   0,  63, }, { 240,   0,   0,  15, }, { 240,   0,   0,  15, }, { 252,   0,   0,  63, }, { 252,   0,   0, 255, }, { 192,   0,   0,  63, }, {   0,   0,   0,  15, }, {   0,   0,   0,   3, }, { 192,   0,   0,   3, }, { 240,   0,   0,  15, }, { 192,   0,   0,  15, }, { 192,   3,   0,  63, }, { 240,   3, 192, 255, }, },
{ { 255, 192,  15,   3, }, { 255,   0,   0,   0, }, { 252,   0,   0,   0, }, { 252,   0,   0,   3, }, { 240,   0,   0,   3, }, { 240,   0,   0,   3, }, { 252,   0,   0,  15, }, { 252,   0,   0,  15, }, { 240,   0,   0,  63, }, { 192,   0,   0,   3, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, { 192,   0,   0,   3, }, {   0,   0,   0,   3, }, {   0,   0,  63,  15, }, { 195,   3, 255, 255, }, },
{ { 255, 192,   3, 255, }, { 252,   0,   0,  63, }, { 240,   0,   0,  15, }, { 192,   0,   0,   3, }, { 192,   0,   0,   3, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, { 192,   0,   0,   3, }, { 240,   0,   0,  15, }, { 240,   0,   0,  15, }, { 252,   0,   0,  63, }, { 255,   0,   0, 255, }, },
{ { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 240,  15, 255, }, { 252,   0,   0,  63, }, { 192,   0,   0,   3, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, { 240,   0,   0,  15, }, { 192,   0,   0,   3, }, },
{ { 255, 240,  15, 255, }, { 255, 192,   3, 255, }, { 255,   0,   0, 255, }, { 240,   0,   0,  15, }, { 192,   0,   0,   3, }, { 240,   0,   0,  15, }, { 192,   0,   0,   3, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, { 192,   0,   0,   3, }, { 255,   0,   0,  63, }, { 252,   0,   0,  15, }, { 240,   0,   0,   3, }, { 240,   0,   0,   3, }, { 252,  15, 192,  15, }, },
{ { 255, 240,  15, 255, }, { 255, 192,   3, 255, }, { 255,   0,   0, 255, }, { 240,   0,   0,  15, }, { 192,   0,   0,   3, }, { 240,   0,   0,  15, }, { 192,   0,   0,   3, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, { 192,   0,   0,   3, }, { 252,   0,   0, 255, }, { 240,   0,   0,  63, }, { 192,   0,   0,  15, }, { 192,   0,   0,  15, }, { 240,   3, 240,  63, }, }
};
//image generated from 2BITIMAGE - by Sandro Maffiodo
#define IMG_MARIO_WIDTH 16
#define IMG_MARIO_BWIDTH 4
#define IMG_MARIO_HEIGHT 16
#define IMG_MARIO_SPRITES_CNT 22

//data size=1408 bytes
const unsigned char img_mario_data[IMG_MARIO_SPRITES_CNT][IMG_MARIO_HEIGHT][IMG_MARIO_BWIDTH] PROGMEM={
{ {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,  42, 168,   0, }, {   0, 170, 170, 128, }, {   0,  15,  48,   0, }, {   3, 195,  63, 192, }, {   3, 195, 207, 192, }, {   0,  63,   0,   0, }, {   0,  15, 252,   0, }, {   0, 162, 160,   0, }, {   2, 168, 168,   0, }, {   2, 168,  84,   0, }, {   0, 252,  20,   0, }, {   0, 250, 128,   0, }, {   0,  42, 160,   0, }, {   0,   0,   0,   0, }, },
{ {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,  42, 168,   0, }, {   0, 170, 170, 128, }, {   0,  15,  48,   0, }, {   3, 195,  63, 192, }, {   3, 195, 207, 192, }, {   0,  63,   0,   0, }, {   0,  15, 252,   0, }, {   0, 162, 162,   0, }, {   0, 168, 168, 128, }, {   3, 232,  20, 192, }, {   3, 192,  20,   0, }, {   0,   0,   2,   0, }, {   0, 168,  42,   0, }, {   0,   0,   0,   0, }, },
{ {   0,   0,   0,   0, }, {   0,  42, 160,   0, }, {   0, 170, 170, 128, }, {   0,  15,  48,   0, }, {   3, 195,  63, 192, }, {   3, 195, 207, 192, }, {   0,  63,   0,   0, }, {   0,  15, 252,   0, }, {   2, 162, 160,   0, }, {  62, 168, 168, 128, }, {  63, 161,  84, 176, }, {  15,   5,  84,  48, }, {   0,   1,  82, 128, }, {  10,   0,  10, 128, }, {  10, 160,  42,   0, }, {   0,   0,   0,   0, }, },
{ {   0,   0,   0,   0, }, {   0,  42, 160,   0, }, {   0, 170, 170,   0, }, {   0,  15,  48,  32, }, {   3, 195,  63, 224, }, {   3, 195, 207, 224, }, {   0,  63,   0,   0, }, {   0,  15, 255, 128, }, {   2, 162, 162,   0, }, {   0, 168, 168,   0, }, {  63,  40,  85,  40, }, {  63,  33,  84, 168, }, {   0,   4,   0, 160, }, {  42,  16,   0, 160, }, {  40,   0,   0,   0, }, {   0,   0,   0,   0, }, },
{ {   0,   0,   0,   0, }, {   0,  61, 124,   0, }, {   3, 245,  95, 192, }, {   5,  95, 245,  80, }, {   5, 127, 253,  80, }, {  53, 255, 255,  92, }, {  61, 255, 255, 124, }, {  61, 255, 255, 124, }, {  53, 127, 253,  92, }, {  21,  95, 245,  84, }, {  21,   0,   0,  84, }, {   0, 243, 207,   0, }, {   3, 243, 207, 192, }, {   3, 255, 255, 192, }, {   0, 255, 255,   0, }, {   0,   0,   0,   0, }, },
{ {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   0,   0,   0, }, {   0,   5,  80,   0, }, {   3, 247, 223, 192, }, {  16,  61, 124,   4, }, {  20,   0,   0,  20, }, {   2,  63, 252, 128, }, {  10, 175, 250, 160, }, {  42, 160,  10, 168, }, },
{ {   0,   0,   0,   0, }, {   0,   5,  80,   0, }, {   0,  21,  84,   0, }, {   0,  31, 244,   0, }, {   0,   7, 208,   0, }, {   1, 192,   3,  64, }, {   5, 192,   3,  80, }, {  23, 205, 115, 212, }, {  23, 245,  95, 212, }, {   5,  80,   5,  80, }, {   0,  15, 240,   0, }, {   0,  63, 255,   0, }, {   2,  63, 254, 160, }, {  10, 143, 250, 168, }, {  10, 160,  42, 128, }, {   2, 160,  32,   0, }, },
{ {   0,   0,   0,   0, }, {   0,   5,  80,   0, }, {   0,  21,  84,   0, }, {   0,  31, 244,   0, }, {   0,   7, 208,   0, }, {   1, 192,   3,  64, }, {   5, 192,   3,  80, }, {  23, 205, 115, 212, }, {  23, 245,  95, 212, }, {   5,  80,   5,  80, }, {   0,  15, 240,   0, }, {   0, 255, 252,   0, }, {  10, 191, 252, 128, }, {  42, 175, 242, 160, }, {   0, 168,  10, 160, }, {   0,   8,  10, 128, }, },
{ {  63, 255,  63, 255, }, {  58, 170,  58, 170, }, {  58, 170,  58, 170, }, {   0,   0,   0,   0, }, { 255,  63, 255,  63, }, { 170,  58, 170,  58, }, { 170,  58, 170,  58, }, {   0,   0,   0,   0, }, {  63, 255,  63, 255, }, {  58, 170,  58, 170, }, {  58, 170,  58, 170, }, {   0,   0,   0,   0, }, { 255,  63, 255,  63, }, { 170,  58, 170,  58, }, { 170,  58, 170,  58, }, {   0,   0,   0,   0, }, },
{ { 192,   0,   0,   3, }, {  15, 255, 255, 240, }, {  62, 170, 170, 168, }, {  58, 175, 250, 160, }, {  58, 176,  12, 168, }, {  58, 178, 172, 160, }, {  58, 178, 188, 168, }, {  58, 130, 194, 160, }, {  58, 170, 202, 168, }, {  58, 170,  10, 160, }, {  58, 170, 170, 168, }, {  58, 170, 202, 160, }, {  58, 170,  10, 168, }, {  10, 170, 170, 160, }, {   8, 136, 136, 128, }, { 192,   0,   0,   3, }, },
{ { 192,   0,   0,   3, }, {  15, 255, 255, 240, }, {  62, 170, 170, 168, }, {  58, 170, 170, 160, }, {  58, 170, 170, 168, }, {  58, 170, 170, 160, }, {  58, 170, 170, 168, }, {  58, 170, 170, 160, }, {  58, 170, 170, 168, }, {  58, 170, 170, 160, }, {  58, 170, 170, 168, }, {  58, 170, 170, 160, }, {  58, 170, 170, 168, }, {  10, 170, 170, 160, }, {   8, 136, 136, 128, }, { 192,   0,   0,   3, }, },
{ { 240,   0,   0,   0, }, { 197,  85,  85,  85, }, {  21,  85,  85,  85, }, {  21,  85,  85,  85, }, {  21,  85,  69,  85, }, {   5,  69,  69,  69, }, { 196,  68,  68,  68, }, { 196,  68,  68,  68, }, { 192,  68,   4,   4, }, { 202,   4, 160, 160, }, { 202, 132, 170, 168, }, { 207, 226, 186, 251, }, { 207, 250, 255, 255, }, { 207, 250, 255, 255, }, { 207, 255, 255, 255, }, { 207, 255, 175, 255, }, },
{ {   0,   0,   0,   0, }, {  85,  85,  85,  85, }, {  85,  85,  85,  85, }, {  85,  85,  85,  85, }, {  85,  85,  69,  85, }, {  69,  69,  69,  69, }, {  68,  68,  68,  68, }, {  68,  68,  68,  68, }, {  64,  68,   4,   4, }, {  74,   4, 160, 160, }, {  42, 132, 170, 168, }, { 175, 226, 186, 251, }, { 255, 250, 255, 255, }, { 255, 250, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 175, 255, }, },
{ {   0,   0,   0,  15, }, {  85,  85,  85,  83, }, {  85,  85,  85,  84, }, {  85,  85,  85,  84, }, {  85,  85,  69,  84, }, {  69,  69,  69,  68, }, {  68,  68,  68,  68, }, {  68,  68,  68,  68, }, {  64,  68,   4,   4, }, {  74,   4, 160, 160, }, {  42, 132, 170, 160, }, { 175, 226, 186, 163, }, { 255, 250, 254, 163, }, { 255, 250, 254, 163, }, { 255, 255, 254, 163, }, { 255, 255, 174, 163, }, },
{ { 240,   0,   0,  15, }, { 197,  85,  85,  83, }, {  21,  85,  85,  84, }, {  21,  85,  85,  84, }, {  21,  85,  69,  84, }, {   5,  69,  69,  68, }, { 196,  68,  68,  68, }, { 196,  68,  68,  68, }, { 192,  68,   4,   4, }, { 202,   4, 160, 160, }, { 202, 132, 170, 160, }, { 207, 226, 186, 163, }, { 207, 250, 254, 163, }, { 207, 250, 254, 163, }, { 207, 255, 254, 163, }, { 207, 255, 174, 163, }, },
{ {   0,   0,   0,   0, }, {  23, 255, 255, 255, }, {  21,  95, 213,  85, }, {  21,  95, 245,  85, }, {  21,  95, 245,  85, }, {  21,  95, 245,  85, }, {  21,  95, 245,  85, }, {  21,  95, 245,  85, }, {  21,  95, 245,  85, }, {  21,  95, 245,  85, }, {  21,  95, 245,  85, }, {  21,  95, 245,  85, }, {  21,  95, 245,  85, }, {  21,  95, 245,  85, }, {   0,   0,   0,   0, }, { 240,   0,   0,   0, }, },
{ {   0,   0,   0,   0, }, { 255, 255, 213,  84, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {  85,  85,  85,  80, }, {   0,   0,   0,   0, }, {   0,   0,   0,  15, }, },
{ {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, {  85,  85,  85,  15, }, },
{ { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, { 241,  85, 253,  85, }, },
{ { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 192, }, { 255, 255, 240,  21, }, { 255, 255, 197,  85, }, { 255, 255,  21,  85, }, { 255, 255,  21,  21, }, { 255,   0,  85,  85, }, { 252,  85,  69,  85, }, { 252,  85,  85,  85, }, { 241,  85,  21,  85, }, { 241,  85,  85,  85, }, { 241,  85,  85,  85, }, },
{ { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 240,  15, 192,  63, }, { 197,  83,  21,  79, }, {  21,  84,  85,  80, }, {  84,  85,  84,  85, }, {  85,  85,  85,  85, }, {  85,  85,  85,  85, }, {  85,  85,  85,  85, }, {  85,  85,  81,  85, }, {  85,  85,  85,  85, }, {  85,  85,  85,  85, }, {  85,  85,  85,  85, }, {  85,  85,  85,  85, }, {  85,  85,  85,  85, }, },
{ { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 255, 255, 255, 255, }, { 192,  15, 255, 255, }, {  21,  83, 255, 255, }, {  85,  84, 255, 255, }, {  85,  84, 255, 255, }, {  84,  85,   0, 255, }, {  85,  81,  85,  63, }, {  85,  85,  85,  79, }, {  85,  85,  81,  79, }, {  85,  85,  85,  79, }, {  85,  85,  85,  83, }, {  85,  85,  84,  84, }, {  85,  85,  85,  84, }, }
};


#define DINO_ID 'D'
#define TREE_ID 'T'

const char dino[] PROGMEM = "x";
const char obstacle[] PROGMEM = "o";
byte stance[4];
char sprite[4];
int posn[4][2];
byte sprite_count = 3;
void loop()
{
    //some buffers to read serial:
    static int temp_x, temp_y;
    static char c;
    while (Serial.available())
    {   
        for (byte j = 0; j < sprite_count;)//read 4 sprites
        {
            temp_x = posn[j][0];
            temp_y = posn[j][1];
            posn[j][0] = 0;
            posn[j][1] = 0;
            
            for (byte i = 0; i < 4 ;)
            {
                vga.delay(3); //give the arduino some time to update the buffer
                if (Serial.available() > 0)
                {
                    c = Serial.read();
                    if (c == '_')//next trait of sprite(id, stance ,x , y)
                    {   
                        i++;
                        continue;
                    }
                    else if (c == '|')
                    {
                        i++;
                        j++;
                        break;
                    }
                    switch (i)
                    {
                    case 0:
                        sprite[j] = c;
                        break;
                    case 1:
                        stance[j] = c - '0';
                        break;
                    case 2:
                    case 3:
                        posn[j][i - 2] *= 10;
                        posn[j][i - 2] += c - '0';
                    default:
                        break;
                    }
                }
            }
            // vga.printSRAM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT ,FNT_NANOFONT_HEIGHT, 3, 1, str, 0, 10 * j, 1);
            if (sprite[j - 1] == DINO_ID)
            {
                if (posn[j - 1][0] != temp_x || posn[j - 1][1] != temp_y)
                    vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, dino, temp_x, VGAX_HEIGHT - 10 - temp_y, 0);
                vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, dino , posn[j - 1][0], VGAX_HEIGHT - 10 - posn[j - 1][1], 1);
            }
            else
            {
                if (posn[j - 1][0] != temp_x || posn[j - 1][1] != temp_y)
                    vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, obstacle, temp_x, VGAX_HEIGHT - 10 - temp_y, 0);
                vga.printPROGMEM((byte*)fnt_nanofont_data, FNT_NANOFONT_SYMBOLS_COUNT, FNT_NANOFONT_HEIGHT, 3, 1, obstacle, posn[j - 1][0], VGAX_HEIGHT - 10 - posn[j - 1][1], 2);
            }
        }
    }
    vga.delay(50);
}